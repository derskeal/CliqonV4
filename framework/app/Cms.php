<?php
/**
 * Frontend Content Management Class
 * This Class is self contained and is used in different ways for different Sites
 *
 * @category   Web application framework
 * @package    Cliq
 * @author     Original Author <conkascom@gmail.com>
 * @copyright  2017 Webcliq
 * @license    http://www.php.net/license/3_01.txt  PHP License 3.01
 * @version    Release: 4.1.0
 * @link       http://cliqon.com
 */
class Cms 
{
	const THISCLASS = "Cms";
	private static $idioms;
	const CLIQDOC = "c_document";

	function __construct() 
	{
		global $clq;
		global $cfg;
		self::$idioms = $cfg['site']['idioms'];
	}

	/** Related to important site pages 
	 *
	 * idiomOptions()
	 * index() - default index page 
	 * content() - main page content caller
	 * 
	 *****************************************************************************************************/	

		/** Language Select widget
		 * Generates the options for a Language selector dropdown 
		 * @param - string - language code
		 * @return - string - set of select options
		 **/
		  function idiomOptions($idiom)
		  {
			global $clq; $opts = "";
			$idiom = $clq->get('idiom');
			$idioms = $clq->get('cfg')['site']['idioms'];
			foreach($idioms as $lcdcode => $lcdname) {
				$idiom == $lcdcode ? $s = ' selected="selected" ': $s = '' ;
				$opts .= '<option value="'.$lcdcode.'" '.$s.'>'.$lcdname.'</option>';
			}
			return $opts;
		  }

		/** Default Index Page content widget
		 * Creates content for an index page
		 * A URL for this would look like http://yourdomain.com/
		 * This is an example of how one might design a Method to return content to a Template
		 * You could return either an array or a string to be consumed by the template
		 * You would use this to create content for the Default Route for the default index.tpl
		 * @param - string - language code - probably the default or autogenerated
		 * @return - array or string with template content
		 **/
		  function index($idiom)
		  {
		 	// Can be a string or an array
		 	$content = "Default index page content";
		 	return $content;
		  }

		/** Content pages widget
		 * This is an example of how one might design a Method to return content to a Template
         * This Method would be used to create content for any page after the visitor has started navigating, including returning to Home or Index
         *
         * A URL for this could look like http://yourdomain.com/page/lcdcode/screen/action/
         * OR http://yourdomain.com/page/lcdcode/screen/action/subaction/?=REQUEST
         *
		 * @param - string - language code - probably the default or autogenerated
		 * @param - string - $screen - If, ElseIf,Else or a switch
		 * @param - string - $action - Or a switch
		 * @param - string - 
		 * @param - string - 
		 * (Or could use )
		 *
		 * @return - array or string with template content for each page
		 **/
		 function content($idiom, $screen, $action, $subaction, $rq)
		 {
			global $clq;
			$js = ""; $content = ""; $thisvars = ['rq' => $rq, 'idiom' => $idiom];
			if($screen == 'content') {

				// Name of the Component template which will be loaded from /views/components/
				$tpl = $action.".tpl"; // Default, may be overwritten
				// Only needs a routine below if cannot be dealt with completely by the template
				switch($action) {
					// case "welcome": break;
					case "software": 
						$result = self::software($rq);
						$thisvars['tabs'] = $result['vars']; 
						$js = $result['js']; 
					break;

					case "list": // List is reserved PHP word
						$result = self::listing($idiom, $subaction, $rq);
						$thisvars = $result['vars'];
						$js = $result['js']; 
						$tpl = $subaction.".tpl"; 
					break;

					default: continue; 
				};
				$content = Q::publishTpl($tpl, $thisvars, "views/components", "cache/".$idiom);
			
			} else if($screen == 'activate') {
				// Get URL to activate a User after registration 
				$auth = $clq->resolve('Auth');
				$content = $auth->userActivate($rq);
			} else if($screen == 'index') {
				$content = self::index($idiom);
			}		
			$clq->set('js', $js);			
			return $content;		
		 }

	/** Widgets for Listing pages
	 *
	 * list() - master calling page
	 * news()
	 * weblinks()
	 * documents()
	 * library()
	 * getListingData()
	 *****************************************************************************************************/

		/** Sub method caller 
		 *
		 * @param - string - subaction: eg weblinks, library or document
		 * @return - array - two lots of value containing template content and data plus javascript for pagescript
		 **/
		 protected static function listing($idiom, $action, $rq) {	return self::$action($rq, $idiom); }

		/* Website news widget 
		 * creates a filtered and ordered (by date) recordset of published news articles
		 * @param - array - $_Request category and search
		 * @param - string - language
		 * @return - array - containing a filtered recordset, this is consumed by template at PHP / Template level
		 **/
		 static function news(array $rq, $idiom)
		 {
			global $clq;
			$config = $clq->resolve('Config');
			$ncfg = C::cfgReadFile('views/config/news.cfg');
			$thisvars = [
				'ncfg' => $ncfg
			];
			$js = "
				console.log('".$ncfg['loadingmsg']."');
				App.".$ncfg['appcall']."(".object_encode($ncfg).");
			";
			return ['vars' => $thisvars, 'js' => $js];
		 }

		/* Website useful links widget 
		 * creates a filtered and ordered (by date) recordset of published news articles
		 * @param - array - $_Request category and search
		 * @param - string - language
		 * @return - array - containing a filtered recordset, this is consumed by template at PHP / Template level
		 **/
		 static function weblinks(array $rq, $idiom)
		 {
			global $clq;
			$config = $clq->resolve('Config');
			$ncfg = C::cfgReadFile('views/config/weblink.cfg');
			$thisvars = [
				'ncfg' => $ncfg
			];
			$js = "
				console.log('".$ncfg['loadingmsg']."');
				App.".$ncfg['appcall']."(".object_encode($ncfg).");
			";
			return ['vars' => $thisvars, 'js' => $js];
		 }

		/* Website document widget 
		 * creates a filtered and ordered (by date) recordset of published news articles
		 * @param - array - $_Request category and search
		 * @param - string - language
		 * @return - array - containing a filtered recordset, this is consumed by template at PHP / Template level
		 **/
		 static function documents(array $rq, $idiom)
		 {
			global $clq;
			$config = $clq->resolve('Config');
			$ncfg = C::cfgReadFile('views/config/document.cfg');
			$thisvars = [

			];
			$js = "
				console.log('".$ncfg['loadingmsg']."');
				App.".$ncfg['appcall']."(".object_encode($ncfg).");
			";
			return ['vars' => $thisvars, 'js' => $js];
		 }

		/* Website library widget
		 * creates a filtered and ordered (by date) recordset of published news articles
		 * @param - array - $_Request category and search
		 * @param - string - language
		 * @return - array - containing a filtered recordset, this is consumed by template at PHP / Template level
		 **/
		 static function library(array $rq, $idiom)
		 {
			global $clq;
			$config = $clq->resolve('Config');
			$ncfg = C::cfgReadFile('views/config/library.cfg');
			$thisvars = [

			];
			$js = "
				console.log('".$ncfg['loadingmsg']."');
				App.".$ncfg['appcall']."(".object_encode($ncfg).");
			";
			return ['vars' => $thisvars, 'js' => $js];
		 }

		/** Load listings data
		 * creates a filtered and ordered recordset of published or active content
		 * @param - array - arguments for the method
		 * @return - array - recordset
		 **/
		 protected static function getListingData($vars)
		 {

    		$method = self::THISCLASS.'->'.__FUNCTION__.'()';
            try {
				global $clq;
				$db = $clq->resolve('Db');
				$config = $clq->resolve('Config');
				$dcfg = C::cfgReadFile('views/config/'.$vars['tabletype'].'.cfg');

				// Set process variables
				$sql = ""; $total = 0; $offset = 0; $limit = 0; $rawrs = []; $rows = [];  $search = []; $rq = $vars['rq'];

				// Build the Query
				$sql = ""; $params = []; $where = "";
				$sql .= "SELECT * FROM ".$vars['table'];	

				// Add Tabletype as a where
				if($vars['tabletype'] != '') {
					$where .= "c_type = ?";
					$params[0] = $vars['tabletype'];
				};

				// Is Search set ?
				if(array_key_exists('search', $rq)) {if($rq['search'] != '') {
					$searches = explode(',', $rq['search']);
					foreach($searches as $t => $item) {
						$e = explode('|', $item);
						$search[$e[0]] = $e[1];
					}
				}};

				// More searches if search array has elements
				if(count($search) > 0) {
					foreach($search as $s => $w) {
						$params[] = '%'.$w.'%';
						if($where != '') {
							$where .= ' AND ';
						};
						$where .= $s." COLLATE latin1_swedish_ci LIKE ? ";
					}
				};

				if($where != '') {$sql .= " WHERE ".$where;};

				// Run query at this point to get total number of records
				$recs = R::getAll($sql, $params); 
				$total = count($recs); 

				// And add Limit by
				$offset = (int)$rq['offset']; // Reads 10
				$limit = (int)$rq['limit'];	// also reads 10
				$start = $offset;
				
				// If total number of records 
				if($total < $limit) {
					$start = 0;
					$limit = $total;
				}

				// Start creating all the edge cases here
				if(+$total > 0) {		

					$sql .= ' LIMIT '.$start.', '.$limit;
					
					// Finally Run the Query
					$rawrs = R::getAll($sql, $params); 
					$rs = D::extractAndMergeRecordset($rawrs);

					// Order and Sort by goes here

					// Now format the records
					for($r = 0; $r < count($rs); $r++) {		
						foreach($dcfg['columns'] as $f => $prop) {
							$rows[$r][$f] = Q::formatCell(
								$f, // fieldname
								$rs[$r], // row
								$prop, // properties of the field
								$vars['table'], // table from which record is derived
								$rs[$r]['id'] // row id
							);
						} 
					};	

				}; 	

				return [
					'total' => $total, 
					'rows' => $rows,
					'offset' => $offset,
					'limit' => $limit,	
					'search' => $params,			
					'sql' => $sql,
					'vars' => $vars
				];
            } catch (Exception $e) {
                return [
					'total' => $total, 
					'rows' => $rows,
					'offset' => $offset,
					'limit' => $limit,	
					'search' => $params,			
					'sql' => $sql,
					'message' => $e->getMessage()
                ];
            } 
		 }

	/** CMS API Calls 
	 * where CMS.Php acts like an API Service
	 *
	 * - loadlistingdata()
	 *
	 *****************************************************************************************************/

		/** Post Form to activate a User after registration
		 * @param - array of variables
		 * @return - array of message and content
		 **/
		function loadlistingdata($vars)
		{
			return [
				'content' => self::getListingData($vars),
				'callBack' => ""
			];
		}

} // Class Ends

